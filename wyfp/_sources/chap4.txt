Chapter 4: Data Structures
--------------------------

.. ASCII Values
.. ------------

.. ord() and chr() and encoding
.. ----------------------------

Named tuples in Python
======================

In the book, I discussed tuples briefly as a way to group together related data,
such as the co-ordinates of a point in three dimension. For example::

    >>> p1 = (1.1,1.2,1.3)

You can then access each of the individual items using the index::

    >>> p1[0]
    1.1
    >>> p1[1]
    1.2
    >>> p1[2]
    1.3


A drawback of the above is that there is no way to tell that 1.1 is
the x component, 1.2 is the y component and 1.3 is the z
component. You have to make sure you use the correct index for each
when you acess them. Wouldn't it be great if you could simply say
``p1.x`` to access the x component, for example? `Named tuple` allows
you to do that. Let us see how. 

Before we can create a named tuple, we will have to import the
``namedtuple()`` function from the ``collections`` module::

    >>> from collections import namedtuple

You can then create a named tuple as follows::

    >>> point = namedtuple('Point',['x','y','z'])

The above creates a named tuple of the type `Point` with the fields:
`x`, `y` and `z` and returns a `class`, which is stored in ``point``.
We can now store the above point as follows::

    >>> p1 = point(1.1,1.2,1.3)

Note how this is similar to initializing an object of an user-defined
class. You can now access the fields as follows::

    >>> p1.x
    1.1
    >>> p1.y
    1.2
    >>> p1.z
    1.3


Named tuples is thus another way to implement C-like structures in
Python. Learn more about it in the `Python documentation <http://docs.python.org/2/library/collections.html#collections.namedtuple>`_.

.. Stacks 
.. ------

.. Mathematical expression evaluation

.. Queue
.. -----

.. Linked Lists
.. ------------
 
