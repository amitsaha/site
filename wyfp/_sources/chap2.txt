Chapter 2: Variables, Memory Allocation and Pointers
----------------------------------------------------

.. Statically typed and Dynamically typed languages
.. ------------------------------------------------

.. Float and Double data types
.. ---------------------------

``sizeof`` operator in C
========================

You have seen in the book how you can use the ``sizeof`` operator to determine
the amount of memory that would be needed to storage an integer or a
floating point number, for example.

The ``sizeof`` operator's behavior becomes quite interesting when you
apply it to an array. For example, consider the array, ``a`` declared
as ``int a[10]``. What will ``sizeof a`` evaluate to ? It will
evaluate to the space required to store 10 integers in
memory. Assuming that the space required for an integer is 4, it will
thus evaluate to 40. Consider that this array is passed as a parameter
to a function. As you learn later in the book, when you pass an array
as parameter, the `base address` of the array is actually passed to
the called function. That is, a pointer to the first element of the
array. Hence, when the ``sizeof`` operator is applied to the array variable
in the called function, it returns the memory required to store a
pointer.

The following program illustrates the working of the operator in
various scenarios:

.. literalinclude:: chap2/sizeof.c
   :language: c
   :linenos:

You can see in line 32, how we can use the ``sizeof`` operator to find
the number of elements in an array. This is of course not possible
when you pass the array to a function for reasons explained earlier.

.. seealso:: The ``sizeof`` operator is described in Section 6.5.3.4 of the `C99 standard <http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf>`_.

.. C keywords
.. ----------

.. Mixing post and pre increment/decrement operators in C
.. ------------------------------------------------------

.. Post and pre increment/decrement operators in Python
.. ----------------------------------------------------

.. Duck typing
.. -----------

.. String manipulation in C
.. ------------------------

.. String manipulation in Python
.. -----------------------------

.. Hexadecimal Numbers
.. -------------------

.. sizeof operator
.. ---------------

.. ASCII and Unicode Experiments
.. -----------------------------

.. Pointers
.. --------

.. realloc
.. -------

.. size_t
.. ------


Python keywords
===============

The `keyword <http://docs.python.org/2/library/keyword.html>`_ module can be used to get a list of keywords defined
by Python and also to test if a certain string is a keyword.

First, import the module::

    >>> import keyword

``keyword.kwlist`` is a sequence containing all the defined keywords::

    >>> keyword.kwlist
    ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
    'elif', 'else', 'except', 'exec', 'finally', 'for', 'from',
    'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or',
    'pass', 'print', 'raise', 'return', 'try', 'while', 'with',
    'yield']

To test if a string is a keyword, you can use the
``keyword.iskeyword()`` function::

    >>> keyword.iskeyword('a')
    False
    >>> keyword.iskeyword('if')
    True

.. _data_c_python:

Data in C and CPython
=====================

There are a number of differences in the way data in C and CPython are
stored and accessed. The following articles attempts to explain these
in detail:

- `Data in CPython <http://amitsaha.github.io/site/notes/articles/data_python_c/data_python.html>`_
- `Data in C <http://amitsaha.github.io/site/notes/articles/data_python_c/data_c.html>`_
- `Data in C and CPython: A comparison <http://amitsaha.github.io/site/notes/articles/data_python_c/data_c_python.html>`_
